AWSTemplateFormatVersion: 2010-09-09

Description: Lamdba hello AWS function

Resources: 
    LambdaDemoRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
           Version: 2012-10-17
           Statement:
           - Effect: Allow
             Principal:
                Service: lambda.amazonaws.com
             Action: sts:AssumeRole
        Description: Lambda execution role
        ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        RoleName: !Join ["",[!Ref AWS::Region, Demolambda-role ]] 
        Tags: 
          - Key: user
            Value: matthew.holmes.labs
    
    HelloAWSFunction:
        Type: AWS::Lambda::Function
        Properties: 
          Code: 
            ZipFile: |
              import json
              import boto3
              
              def lambda_handler(event, context):
              
                  data = json.loads(event["body"])
              
                  dynamodb = boto3.resource('dynamodb')
              
                  table = dynamodb.Table('People')
              
                  print(f"Writing item: {data}")
                  response = table.put_item(
                      Item={
                          'user_id': data["user_id"],
                          'first_name': data["first_name"],
                          'age': data["age"]
                      }
                  )
              
                  response = {'statusCode': 200,
                  'body': json.dumps(response)}
              
                  return response
          Handler: index.lambda_handler
          FunctionName: HelloAWSLambda
          Description: Hello AWS function
          Role: !GetAtt LambdaDemoRole.Arn 
          Runtime: python3.8
          Tags: 
          - Key: user
            Value: matthew.holmes.labs
          TracingConfig:
              Mode: Active
    
    DemoLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties: 
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt HelloAWSFunction.Arn
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DemoRestApi}/*/*'

    DemoRestApi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Description: A test API
        Name: DemoRestAPI
        EndpointConfiguration:
          Types: 
          - REGIONAL
        Tags: 
        - Key: user
          Value: matthew.holmes.labs
    
    DemoGetMethod:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        RestApiId: !Ref DemoRestApi
        ResourceId: !GetAtt DemoRestApi.RootResourceId
        HttpMethod: GET                 
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY          
          IntegrationHttpMethod: POST
          Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloAWSFunction.Arn}/invocations
          
    DemoApiGatewayDeployment:
        DependsOn: DemoGetMethod 
        Type: AWS::ApiGateway::Deployment
        Properties:
          RestApiId: !Ref DemoRestApi
          Description: Demo deployment
          StageName: staging

    MyDynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties: 
          AttributeDefinitions: 
            - AttributeName: user_id
              AttributeType: "S"
            - AttributeName: first_name
              AttributeType: "S"
          BillingMode: PAY_PER_REQUEST
          KeySchema: 
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: first_name
              KeyType: RANGE
          TableName: People
          Tags: 
          - Key: user
            Value: matthew.holmes.labs

            
Outputs:
  RestApiID:
    Description: REST API id
    Value: !Ref DemoRestApi
  RootResourceID:
    Description: Root resource id
    Value: !GetAtt DemoRestApi.RootResourceId
